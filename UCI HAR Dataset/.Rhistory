x<-log(-1)
printmessage2(x)
?traceback
?browser
?debug
?trace
?recover
?recover
?trace
packages("swirl")
package("swirl")
swirl()
Packages("swirl")
?package
?packages
?Packages
?Package
library("swirl")
swirl()
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4, 5).
dim(my_vector)<- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix()
info("matrix")
info(matrix)
info('matrix')
info(matrix())
?matrix
my_matrix2<-matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients<-c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames<-c("patient", "age", "weight","bp", "rating", "test")
colnames(?)
?colnames()
colnames(my_data)<-cnames
my_data
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
!5==7
FALSE&FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Data()
Sys.Date()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6,7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("test")
submit()
mad_libs(place="Austin",adjective="nice",noun="weather")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list<-lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags, class)
cls_vect
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat<-sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals,length)
identical(unique_vals,sapply(flags,unique))
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population,flags$landmass,summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
rm(ls())
rm(list=ls())
make.NegLogLik<-function (data,fixed=c(FALSE,FALSE)){
params<-fixed
function(p){
params[!fixed]<-p
mu<-params[1]
sigma<-params[2]
a<- -0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mi)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1);normals<-rnorm(100,1,2)
nLL<-make.NegLogLik(normals)
nLL
ls(environment(nLL))
optim(c(mu=0,sigma=1),nLL)$par
make.NegLogLik<-function (data,fixed=c(FALSE,FALSE)){
params<-fixed
function(p){
params[!fixed]<-p
mu<-params[1]
sigma<-params[2]
a<- -0.5*length(data)*log(2*pi*sigma^2)
b<- -0.5*sum((data-mu)^2)/(sigma^2)
-(a+b)
}
}
set.seed(1);normals<-rnorm(100,1,2)
nLL<-make.NegLogLik(normals)
nLL
ls(environment(nLL))   #free variables
optim(c(mu=0,sigma=1),nLL)$par
nLL<-make.NegLogLik(normals,c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
nLL<-make.NegLogLik(normals,c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
#fixing mu=1
nLL<-make.NegLogLik(normals,c(1,FALSE))
optimize(nLL,c(1e-6,10))$minimum
x<-seq(1.7,1.9,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="1")
plot(x,exp(-(y-min(y))),type="l")
nLL<-make.NegLogLik(normals,c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
x<-seq(0.5,1.5,len=100)
y<-sapply(x,nLL)
plot(x,exp(-(y-min(y))),type="l")
rm(lsit=ls())
rm(list=ls())
x<-as.Date("1970-1-1")
x
unclass(x)
unxlass(as.Date("1970-1-2"))
unclass(as.Date("1970-1-2"))
x<-Sys.time()
x
p<-as.POSIXlt(x)
names(unclass(p))
p$sec
unclass(as.POSIXct(Sys.time()))
unclass(p)
datestring<-c("January 10,2012 10:40","December 9, 2011 9:10")
x<-strptime(datestring,"%B %d, %Y %H:%M")
x
class(x)
p
x<-as.Date("2012-01-01")
y<-strptime("9 Jan 2011 11:34:21","%d %b %Y %H:%M:%S")
x-y
x<-as.POSIXlt(x)
x-y
difftime(x-y,"Day")
difftime(x,y,"Day")
difftime(x,y,"day")
difftime(x,y,"hour")
?difftime
difftime(x,y,"hours")
difftime(x,y,units="hours")
rm(list=ls())
mean(x)
traceback()
lm(y~x)
traceback()
debug(lm)
lm(y~x)
debug(lm)
lm(y~x)
options(error=recover)
read.csv.("nosuchfile")
read.csv("nosuchfile")
options(error=recover)
read.csv("nosuchfile")
q
str(str)
str(lm)
lm()
x<-rnorm(100,2,4)
str(x)
summary(x)
f<-gl(40,10)
str(f)
summary(f)
library(dataset)
library(datasets)
str(airquality)
x<-rnorm(10)
x
x<-rnotm(10,20,2)
x<-rnorm(10,20,2)
summary(x)
set.seed(1)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
rpois(10,1)
rpois(10,2)
rpois(10,20)
ppois(2,2) # cumulative distribution
ppois(4,2)
ppois(4,2)
set.seed(20)
x<-rnorm(100)
e<-rnorm(100,0,2)
y<--0.5+2*x+e
summary(y)
plot(x,y)
set.seed(10)
x<-rbinom(100,1,0.5)
y<--0.5+2*x+e
summary(y)
plot(x,y)
set.seed(1)
x<-rnorm(100)
log.mu<--0.5+0.3*x
y<-rpois(100,exp(log.mu))
summary(y)
plot(x,y)
set.seed(1)
sample(1:10,4)
sample(1:10,4)
sample(letters,5)
sample(1:10)
sample(1:10)
sample(1:10,replace=TRUE)
set.seed(1)
rpois(5, 2)
set.seed(1)
rpois(5, 2)
?rnorm
?ppois
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
x
plot(x,y)
rbinom
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
system.time()
?system.time
?system.time
?proc_time
system.time(readLines("http://www.jhsph.edu"))
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+”)
}
i <- 1:n
1 / outer(i - 1, i, "+")
}
hilbert <- function(n) {
i <- 1:n
1 / outer(i - 1, i, "+")
}
x <- hilbert(1000)
system.time(svd(x))
system.time({
n <- 1000
r <- numeric(n)
for (i in 1:n) {
x <- rnorm(n)
r[i] <- mean(x)
}
})
?Rprof
sample.interval=1000
;,(y~x)
lm(y~x)
sample.interval=1000
sample.interval=10000
?summryRprof
library(data.table)
install.packages("data.table")
library(data.table)
DF=data.frame(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DF,3)
DT=data.table(x=rnorm(9),y=rep(c("a","b","c"),each=3),z=rnorm(9))
head(DT,3)
tables()
DT[2,]
DT[DT$y="a"]
DT[DT$y="a",]
DT[DT$y=="a",]
DT[,a:=x>0]
DT
DT[,b:=mean(x+z)]
DT
setwd("C:/Users/bzou/Documents/R/Data Cleaning/UCI HAR Dataset")
library(dplyr)
activity_labels <- read.table(file = "./activity_labels.txt")
rm(list=ls())
activity_labels <- read.table(file = "./activity_labels.txt")
View(activity_labels)
View(activity_labels)
features <- read.table(file = "./features.txt")
View(features)
features_info <- read.table(file = "./features_info.txt")
features_info <- read.table(file = "./features_info.txt")
activity_labelsDat <- tbl_df(activity_labels)
featuresDat <- tbl_df(features)
activity_labelsDat
featuresDat
trainingSet <-  read.table(file = "./train/X_train.txt")
trainingSetDat <- tbl_df(trainingSet)
rm(list=ls())
ActivityLabel <- tbl_df(read.table("./activity_labels.txt"))
Features      <- tbl_df(read.table("./features.txt"))
TrainingSet   <- tbl_df(read.table("./train/X_train.txt"))
TrainingLabel <- tbl_df(read.table("./train/y_train.txt"))
TestSet       <- tbl_df(read.table("./test/X_train.txt"))
TestLabel     <- tbl_df(read.table("./test/y_train.txt"))
TestSet       <- tbl_df(read.table("./test/X_test.txt"))
TestLabel     <- tbl_df(read.table("./test/y_test.txt"))
TrainingSet
View(TrainingSet)
fileUrl1 <- "https://dl.dropboxusercontent.com/u/7710864/data/reviews-apr29.csv"
fileUrl2 <- "https://dl.dropboxusercontent.com/u/7710864/data/solutions-apr29.csv"
setwd("C:/Users/bzou/Documents/R/Data Cleaning")
download.file(fileUrl1,destfile = "./data/reviews.csv",method = "curl")
download.file(fileUrl2,destfile = "./data/solutions.csv",method = "curl")
download.file(fileUrl1,destfile = "./data/reviews.csv")
download.file(fileUrl2,destfile = "./data/solutions.csv")
reviews <- read.table("./data/reviews.csv",sep=",")
solutions <- read.table("./data/solutions.csv",sep=",")
head(reviews,2)
head(solutions,2)
reviews <- read.table("./data/reviews.csv",sep=",",head = TRUE)
solutions <- read.table("./data/solutions.csv",sep=",",head = TRUE)
head(reviews,2)
head(solutions,2)
names(reviews)
names(solutions)
mergeData = merge(reviews,solutions,by.x = "solution_id",by.y = "id",all=TRUE)
head(mergeData)
mergeData2=merge(reviews,solutions,all=TRUE)
head(mergeData2)
df1 = data.framge(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
arrange(join(df1,df2),id)
library(plyr)
arrange(join(df1,df2),id)
df1 = data.frame(id=sample(1:10),x=rnorm(10))
df2 = data.frame(id=sample(1:10),y=rnorm(10))
arrange(join(df1,df2),id)
df3 = data.frame(id=sample(1:10),z=rnorm(10))
dfList = list(df1,df2,df3)
join_all(dfList)
rm(df1)
rm(df2)
rm(df3)
rm(reviews)
rm(solutions)
rm(mergeData)
rem(mergeData2)
rm(mergeData2)
View(TrainingLabel)
View(TestLabel)
View(Features)
?name
TrainingSet
class(Features[,2])
class(Features)
View(Features)
list <- Features[,2]
View(list)
class(list)
list <- as.character(Features[,2])
View(Features)
rm(dfList)
rm(fileUrl1)
rm(fileUrl2)
Features[,2]
colnames(TrainingSet) <- Features[,2]
TrainingSet
View(TestSet)
ActivityLabel <- read.table("./activity_labels.txt")
setwd("C:/Users/bzou/Documents/R/Data Cleaning/UCI HAR Dataset")
ActivityLabel <- read.table("./activity_labels.txt")
Features      <- read.table("./features.txt")
TrainingSet   <- read.table("./train/X_train.txt")
TrainingLabel <- read.table("./train/y_train.txt")
TestSet       <- read.table("./test/X_test.txt")
TestLabel     <- read.table("./test/y_test.txt")
class(Features[,2])
class(as.vector(Feature[,2]))
class(as.vector(Features[,2]))
name <- as.vector(Features[,2])
colnames(TrainingSet) <- name
View(TrainingSet)
View(TestSet)
colnames(TestSet)     <- name
View(ActivityLabel)
ActivityLabel[2,]
ActivityLabel[2,2]
class(ActivityLabel[2,2])
getLabel <- function (LabelIndex){
Label <- ActivityLabel[LabelIndex,2]
}
getLabel(4)
getLabel(4)
getLabel <- function (LabelIndex){
ActivityLabel[LabelIndex,2]
}
getLabel(4)
rm(list)
?sapply
sapply(ActivityLabel[,2],function(x):x+1)
sapply(ActivityLabel[,2],function(x){x+1})
sapply(ActivityLabel[,2],function(x){as.numeric(x)+1})
class(sapply(ActivityLabel[,2],function(x){as.numeric(x)+1}))
TrainingActivityLabel <- sapply(TrainingLabel[,1],function(x){ActivityLabel[as.numeric(x),2]})
calss(TrainingAcrivityLabel)
class(TrainingAcrivityLabel)
class(TrainingActivityLabel)
length(TrainingActivityLabel)
TestActivityLabel     <- sapply(TestLabel[,1],function(x){ActivityLabel[as.numeric(x),2]})
length(TestActivityLabel)
TrainingSet[,"ActivityLabel"] <- TrainingActivityLabel
names(TraningSet)
names(TrainingSet)
names(TestSet)
TestSet[,"ActivityLabel"]     <- TestActivityLabel
names(TestSet)
View(TrainingSet)
?interface
intersect(names(TrainingSet),names(TestSet))
Dat <- merge(TrainingSet,TestSet,all = TRUE)
?summarize
?summary
avg <- sapply(Dat,mean)
avg <- sapply(Dat,function(x){mean(as.numeric(x)))
avg <- sapply(Dat,function(x){mean(as.numeric(x))})
sd  <- sapply(Dat,function(x){sd(as.numeric(x))})
summary <- data.frame(Measurement = name, Avg=avg, Sd=sd)
